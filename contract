# Collateralized Loan Contract

This project is a **Collateralized Loan Contract** written in Solidity, which allows a borrower to take out a loan secured by collateral. The contract calculates interest on the loan, manages repayments, and allows the borrower to withdraw their collateral once the loan is repaid. If the loan is not repaid by the due date, the lender can claim the collateral.

## Features

- **Loan Issuance**: Lender can set the loan amount, collateral amount, interest rate, and loan duration.
- **Interest Calculation**: Loans accrue interest, which is added to the total repayment amount.
- **Loan Repayment**: Borrower repays the loan with interest.
- **Collateral Withdrawal**: Borrower can withdraw collateral once the loan is fully repaid.
- **Overdue Loan Management**: Lender can claim the collateral if the loan is overdue and not repaid.

## Contract Overview

### Key Functions

- **`setLoanDetails()`**: Initializes loan details such as the borrower, loan amount, collateral amount, interest rate, and loan duration.
- **`repayLoan()`**: Allows the borrower to repay the loan along with the interest.
- **`calculateTotalRepayment()`**: Calculates the total amount to be repaid, including interest.
- **`withdrawCollateral()`**: Allows the borrower to withdraw the collateral after the loan is repaid.
- **`claimCollateral()`**: Allows the lender to claim the collateral if the loan is overdue.
- **`depositCollateral()`**: Allows the borrower to deposit collateral before the loan is issued.

## Deployment

### Prerequisites

- **Solidity version**: `^0.8.0`
- **Ethereum-compatible network**: Can be deployed on Ethereum, Binance Smart Chain, or other EVM-compatible networks.
- **Development tools**: Use Remix IDE, Truffle, or Hardhat to compile, deploy, and test the contract.

### Steps to Deploy

1. **Open Remix IDE**: Go to [Remix](https://remix.ethereum.org).
2. **Compile the Contract**: Paste the Solidity contract code into a new file in Remix and compile it.
3. **Deploy the Contract**: Deploy the contract on your chosen network (either a testnet or the mainnet).
4. **Obtain Contract Address**: After deploying, you will get the **Contract Address**. 
   
   **Update the contract address below.**

---

### Contract Address:  
**[Insert Contract Address Here]**

---

## Example Usage

1. **Set Loan Details**: 
   - The lender sets up the loan details by calling `setLoanDetails()`. This includes the borrower address, loan amount, collateral amount, interest rate, and loan duration.

2. **Deposit Collateral**: 
   - The borrower deposits the specified collateral using `depositCollateral()`. 

3. **Repay the Loan**: 
   - The borrower repays the loan and interest by calling the `repayLoan()` function. 

4. **Withdraw Collateral**: 
   - After repaying the loan, the borrower can withdraw the collateral using `withdrawCollateral()`.

5. **Claim Collateral**: 
   - If the loan is overdue and the borrower has not repaid, the lender can claim the collateral using `claimCollateral()`.

## Security Considerations

- **Reentrancy**: The contract uses a simple `transfer()` function to mitigate reentrancy risks, but a full audit should be performed before mainnet deployment.
- **Interest Rate Validation**: There is no validation of extreme interest rates. Consider adding checks to ensure the interest rate is reasonable.
- **Loan Repayment**: The contract assumes full repayment of the loan. You may need to implement mechanisms for partial repayments if required.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

## Additional Notes

- The contract only handles basic collateralized loan functionalities. It does not support features like dynamic interest rates or partial repayments at the moment.
- If you wish to add features like ERC20 token support or flexible loan terms, the contract can be extended accordingly.
- Always thoroughly test the contract on a testnet before deploying it to a live network.

## Disclaimer

This contract is provided "as-is" without any guarantees or warranty. Ensure that you audit and test the contract properly before deploying it to the main network. Use at your own risk.

---

Feel free to customize the README further if you add new features or need additional instructions for setting up the project.
